#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0; // pos of grass blade on geom, w = orientation
    vec4 v1; // bezier curve guide wrt up, w = height
    vec4 v2; // guide for forces, w = width
    vec4 up; // up (corresponds to norm of geom that v0 is on, w = stiffness
};

layout (set = 2, binding = 0) buffer GrassBlades {
    Blade grassBlades[];
};

layout (set = 2, binding = 1) buffer ValidGrass {
    Blade validGrass[];
};

layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

// vary with time 
// use sinusoidal func
vec3 simulateWind(vec3 v0, float t) {
    float windSpeed = 1.5f;
    float frequency = 0.7f;
    // diff based on blade pos
    float phase = dot(v0.xz, vec2(0.2f, 0.3f));
    
    float strength = 3.0f + 2.0f * cos(t + phase);
    float sway = sin(t * windSpeed + phase * frequency);

    return vec3(strength * sway, 0.0f, 0.0f);
}

bool checkViewFrustrum(vec3 p)
 {
    vec4 ndcP = camera.proj * camera.view * vec4(p, 1.0f); 
    float t = 0.001;
    float homogenous = ndcP.w + t;

    // check if each component between -h and homogenous

    return (ndcP.x >= -1 * homogenous && ndcP.x <= homogenous) &&
           (ndcP.y >= -1 * homogenous && ndcP.y <= homogenous) &&
           (ndcP.z >= -1 * homogenous && ndcP.z <= homogenous);
 }

void main() {
	// Reset the number of blades to 0
    uint index = gl_GlobalInvocationID.x; 
	if (index == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    Blade blade = grassBlades[index];

    // TODO: Apply forces on every blade and update the vertices in the buffer

    vec3 v0 = blade.v0.xyz;
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    vec3 up = blade.up.xyz;

    float orientation = blade.v0.w;
    float height = blade.v1.w;
    float width = blade.v2.w;
    float stiffness = blade.up.w;

    vec3 right = vec3(sin(orientation), 0.0f, cos(orientation));
    vec3 front = cross(right, up);

    // Recovery 
    // orig pose of v2 is straight up from v0 
    vec3 Iv2 = v0 + (height * up); 
    vec3 r = (Iv2 - v2) * stiffness;

    // Gravity 
    float mass = 1.0f;
    // d.xyz = gravity dir 
    // d.w = acceleration 
    vec4 d = vec4(0.0f, -1.0f, 0.0f, 15.8f);

    // user defined param so setting to 0.5
    float t = 0.5f;

    vec3 gE = mass * (normalize(d.xyz) * d.w * (1 - t) + t);
    vec3 gF = 0.25f * length(gE) * front;
    vec3 g = gE + gF;

    // Wind 
    vec3 windInfluence = simulateWind(v0, totalTime);
    float dirAlignment = 1 - abs(dot(normalize(windInfluence), normalize(v2 - v0)));
    float heightRatio = dot((v2 - v0), up) / height;
    float alignment = heightRatio * dirAlignment;

    vec3 totalWind = windInfluence*alignment;

    // Total force
    // account for v2 being underground 
    v2 += (r + g + totalWind) * deltaTime;

    float lProj = length(v2 - v0 - up * dot(v2 - v0, up));
    vec3 v1Pos = v0 + height * up * max(1 - (lProj/height), 0.05f*max(lProj/height, 1.0f));

    // dist btwn first & last ctrl pt
    float l0 = length(v2 - v0);
    // sum of all dist btwn ctrl pt & subsequent
    float l1 = length(v1 - v0) + length(v2 - v1);
    // bezier curve of degree 2 
    float n = 2.0f;

    float bezierLen = (2*l0 + (n-1)*l1)/(n+1);

    float ratio = height / bezierLen;

    vec3 v1Corr = v0 + ratio*(v1 - v0);
    vec3 v2Corr = v1Corr + ratio*(v2 - v1);

    // setting values 
    grassBlades[index].v1.xyz = v1Corr;
    grassBlades[index].v2.xyz = v2Corr;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer

    // orientation 
    vec3 camPos = inverse(camera.view)[3].xyz;

    // if abs val of this exceeds 0.9, should be culled
    //if (abs(dot(normalize(camPos) - v0, right)) > 0.9f) {
    //    return;
    //}

    // view-frustrum 
    vec3 m = 0.25*v0 + 0.5*v1 + 0.25*v2;

    // considering v0, m, and v2 for this test
    //if (!checkViewFrustrum(v0) && !checkViewFrustrum(m) && !checkViewFrustrum(v2)) {
    //    return;
    //}

    // distance
    float dProj = length(v0 - camPos - up * dot(v0 - camPos, up));
    float dMax = 15.0f;
    float nLevel = 5.0f; 

    //if (dProj > dMax || (mod(index, nLevel) > floor(nLevel * (1 - dProj/dMax)))) 
    //{
    //    return;
    //}

	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    // adds contents of data to mem (2nd param to first)
    // returns original content of mem before addition (so vertCount - 1)
    uint culledIndex = atomicAdd(numBlades.vertexCount, 1);
    validGrass[culledIndex] = blade;
}
