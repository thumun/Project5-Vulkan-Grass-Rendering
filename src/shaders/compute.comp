#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0; // pos of grass blade on geom, w = orientation
    vec4 v1; // bezier curve guide wrt up, w = height
    vec4 v2; // guide for forces, w = width
    vec4 up; // up (corresponds to norm of geom that v0 is on, w = stiffness
};

layout (set = 2, binding = 0) buffer GrassBlades {
    Blade grassBlades[];
};

layout (set = 2, binding = 1) buffer ValidGrass {
    Blade validGrass[];
};

layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
} numBlades;

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

// vary with time 
// use sinusoidal func
vec3 simulateWind(vec3 v0, float t) {
    float strength = 3.0f;
    return vec3(strength * sin(t), 0.0f, 0.0f);
}

void main() {
	// Reset the number of blades to 0
    uint index = gl_GlobalInvocationID.x; 
	if (index == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    Blade blade = grassBlades[index];

    // TODO: Apply forces on every blade and update the vertices in the buffer

    vec3 v0 = blade.v0.xyz;
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    vec3 up = blade.up.xyz;

    float orientation = blade.v0.w;
    float height = blade.v1.w;
    float width = blade.v2.w;
    float stiffness = blade.up.w;

    vec3 right = vec3(sin(blade.v0.w), 0.0f, cos(blade.v0.w));
    vec3 front = cross(right, blade.up.xyz);

    // Recovery 
    // orig pose of v2 is straight up from v0 
    vec3 Iv2 = v0 + (height * up); 
    vec3 r = (Iv2 - v2) * stiffness;

    // Gravity 
    float mass = 1.0f;
    // d.xyz = gravity dir 
    // d.w = acceleration 
    vec4 d = vec4(0.0f, -1.0f, 0.0f, 9.8f);

    // user defined param so setting to 0.5
    float t = 0.5f;

    vec3 gE = mass * (normalize(d.xyz) * d.w * (1 - t) + t);
    vec3 gF = 0.25f * length(gE) * front;
    vec3 g = gE + gF;

    // Wind 
    vec3 windInfluence = simulateWind(v0, deltaTime);
    float dirAlignment = 1 - abs(dot(normalize(windInfluence), normalize(v2 - v0)));
    float heightRatio = dot((v2 - v0), up) / height;
    float alignment = heightRatio * dirAlignment;

    vec3 totalWind = windInfluence*alignment;

    // Total force
    // account for v2 being underground 
    v2 = (r + g + totalWind) * deltaTime;

    float lProj = length(v2 - v0 - up * dot(v2 - v0, up));
    vec3 v1Pos = v0 + height * up * max(1 - (lProj/height), 0.05f*max(lProj/height, 1.0f));

    // dist btwn first & last ctrl pt
    float l0 = length(v2 - v0);
    // sum of all dist btwn ctrl pt & subsequent
    float l1 = length(v1 - v0) + length(v2 - v1);
    // bezier curve of degree 2 
    float n = 2.0f;

    float bezierLen = (2*l0 + (n-1)*l1)/(n+1);

    float ratio = height / bezierLen;

    vec3 v1Corr = v0 + ratio*(v1 - v0);
    vec3 v2Corr = v1Corr + ratio*(v2 - v1);

    // setting values 
    grassBlades[index].v1.xyz = v1Corr;
    grassBlades[index].v2.xyz = v2Corr;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer

    // orientation 


    // view-frustrum 


    // distance


	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    // adds contents of data to mem (2nd param to first)
    // returns original content of mem before addition (so vertCount - 1)
    uint culledIndex = atomicAdd(numBlades.vertexCount, 1);
    validGrass[culledIndex] = blade;
}
